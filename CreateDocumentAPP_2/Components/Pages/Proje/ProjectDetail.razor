@page "/project-detail/{ProjeID:int}"
@using CreateDocumentAPP_2.Entities.Model
@inject ProjeDbContext Db
@inject IDialogService DialogService
@inject AuthenticationStateProvider AuthStateProvider
@using MudBlazor

<MudContainer Class="mt-4">
    <MudPaper Class="p-4">
        <MudCard>
            <MudCardContent>
                <MudStack Direction="Row" AlignItems="AlignItems.Center" Spacing="2">
                    <MudText Typo="Typo.h4">📄 @proje?.ProjeAdi</MudText>
                    <MudIconButton Icon="@Icons.Material.Filled.PostAdd" OnClick="ToggleEditMode" />
                </MudStack>

                @if (proje == null)
                {
                    <MudAlert Severity="Severity.Warning">Proje bulunamadı.</MudAlert>
                }
                else
                {
                    <MudGrid>
                        <MudItem xs="12" md="6">
                            @if (editMode)
                            {
                                <MudTextField Label="Proje Adı" @bind-Value="proje.ProjeAdi" />
                                <MudTextField Label="Açıklama" @bind-Value="proje.Aciklama" />
                                <MudSelect T="ProjeDurumu" Label="Durum" @bind-Value="proje.Durum">
                                    @foreach (var durum in Enum.GetValues(typeof(ProjeDurumu)).Cast<ProjeDurumu>())
                                    {
                                        <MudSelectItem Value="@durum">@durum</MudSelectItem>
                                    }
                                </MudSelect>
                                <MudDatePicker Label="Bitiş Tarihi" @bind-Date="proje.BitisTarihi" />
                                <MudSelect T="int?" Label="Kategori" @bind-Value="proje.KategoriID">
                                    @foreach (var kategori in kategoriler)
                                    {
                                        <MudSelectItem Value="@(kategori.KategoriID as int?)">@kategori.Ad</MudSelectItem>
                                    }
                                </MudSelect>


                                <MudButton Color="Color.Primary" OnClick="KaydetProje">Kaydet</MudButton>
                            }
                            else
                            {
                                <MudText><b>Proje Adı:</b> @proje.ProjeAdi</MudText>
                                <MudText><b>Açıklama:</b> @proje.Aciklama</MudText>
                                <MudText><b>Durum:</b> @proje.Durum</MudText>
                                <MudText><b>Başlangıç:</b> @proje.BaslangicTarihi?.ToShortDateString()</MudText>
                                <MudText><b>Bitiş:</b> @proje.BitisTarihi?.ToShortDateString()</MudText>
                                <MudText><b>Kategori:</b> @proje.Kategori?.Ad</MudText>
                            }
                        </MudItem>
                        <MudItem xs="12" md="6">
                            <MudText Typo="Typo.h6">Oluşturan Kullanıcı</MudText>
                            <MudText><b>Ad Soyad:</b> @proje.Olusturan?.Ad @proje.Olusturan?.Soyad</MudText>
                            <MudText><b>Email:</b> @proje.Olusturan?.Email</MudText>
                            <MudText><b>Rol:</b> @proje.Olusturan?.Rol</MudText>
                            <MudText><b>Ünvan:</b> @proje.Olusturan?.Title</MudText>
                            <MudText><b>Departman:</b> @proje.Olusturan?.Departman?.Ad</MudText>
                        </MudItem>
                    </MudGrid>

                    <MudDivider Class="my-4" /> //-------------------------------------------------------------------------------------------------------

                    <MudText Typo="Typo.h6">🎯 Proje Hedefi</MudText>
                    <MudText>@proje.ProjeDetay?.StratejikHedefler</MudText>

                    <MudDivider Class="my-4" />  //-------------------------------------------------------------------------------------------------------

                    <MudStack Direction="Row" AlignItems="AlignItems.Center" Spacing="1" Class="mb-2">
                        <MudText Typo="Typo.h6">💰 Finansal Bilgiler</MudText>
                        <MudIconButton Icon="@Icons.Material.Filled.Add" OnClick="() => OpenDynamicDialog(nameof(FinansalBilgi))" />
                    </MudStack>
                    <MudList T="object">
                        @foreach (var item in proje.FinansalBilgiler)
                        {
                            <MudListItem>
                                <MudListItemText>@item.IlgiliIs - <b>@item.AyrilanButce</b></MudListItemText>
                                <MudListItemIcon>
                                    <MudIconButton Icon="@Icons.Material.Filled.Edit" Color="Color.Primary" Size="Size.Small"
                                                   OnClick="() => OpenDynamicDialog(nameof(FinansalBilgi), item.Id, item)" />
                                    <MudIconButton Icon="@Icons.Material.Filled.Delete" Color="Color.Error" Size="Size.Small"
                                                   OnClick="() => ConfirmDelete(item)" />
                                </MudListItemIcon>
                            </MudListItem>
                        }

                    </MudList>

                    <MudDivider Class="my-4" />    //-------------------------------------------------------------------------------------------------------

                    <MudStack Direction="Row" AlignItems="AlignItems.Center" JustifyContent="SpaceBetween">
                        <MudText Typo="Typo.h6">🛠️ Teknik Gereksinimler</MudText>
                        <MudIconButton Icon="@Icons.Material.Filled.Add" OnClick="() => OpenDynamicDialog(nameof(TeknikGereksinim))" />
                    </MudStack>
                    <MudTable Items="@proje.TeknikGereksinimler" Hover="true">
                        <HeaderContent>
                            <MudTh>Gereksinim</MudTh>
                            <MudTh>Notlar</MudTh>
                            <MudTh>Aksiyonlar</MudTh>
                        </HeaderContent>
                        <RowTemplate>
                            <MudTd>@context.Gereksinim</MudTd>
                            <MudTd>
                                <MudButton Variant="Variant.Text" Color="Color.Primary"
                                           OnClick='() => ShowNotesDialog(context.Notlar.ToList(), "🛠️ Teknik Gereksinim Notları", null, context.Id)'>
                                    Notları Görüntüle
                                </MudButton>
                            </MudTd>
                            <MudTd>
                                <MudIconButton Icon="@Icons.Material.Filled.Edit" Color="Color.Primary" Size="Size.Small"
                                               OnClick="() => OpenDynamicDialog(nameof(TeknikGereksinim), context.Id, context)" />
                                <MudIconButton Icon="@Icons.Material.Filled.Delete" Color="Color.Error" Size="Size.Small"
                                               OnClick="() => ConfirmDelete(context)" />
                            </MudTd>
                        </RowTemplate>
                    </MudTable>


                    <MudDivider Class="my-4" /> //-------------------------------------------------------------------------------------------------------

                    <MudStack Direction="Row" AlignItems="AlignItems.Center" JustifyContent="SpaceBetween">
                        <MudText Typo="Typo.h6">🧾 Fonksiyonel Gereksinimler</MudText>
                        <MudIconButton Icon="@Icons.Material.Filled.Add" OnClick="() => OpenDynamicDialog(nameof(FonksiyonelGereksinim))" />
                    </MudStack>
                    <MudTable Items="@proje.FonksiyonelGereksinimler" Hover="true">
                        <HeaderContent>
                            <MudTh>Gereklilik</MudTh>
                            <MudTh>Açıklama</MudTh>
                            <MudTh>Önem</MudTh>
                            <MudTh>Notlar</MudTh>
                            <MudTh>Aksiyonlar</MudTh>
                        </HeaderContent>
                        <RowTemplate>
                            <MudTd>@context.Gereklilik</MudTd>
                            <MudTd>@context.Aciklama</MudTd>
                            <MudTd>@context.Onem</MudTd>
                            <MudTd>
                                <MudButton Variant="Variant.Text" Color="Color.Primary"
                                           OnClick='() => ShowNotesDialog(context.Notlar.ToList(), "🧾 Fonksiyonel Gereksinim Notları", context.Id, null)'>
                                    Notları Görüntüle
                                </MudButton>
                            </MudTd>
                            <MudTd>
                                <MudIconButton Icon="@Icons.Material.Filled.Edit" Color="Color.Primary" Size="Size.Small"
                                               OnClick="() => OpenDynamicDialog(nameof(FonksiyonelGereksinim), context.Id, context)" />
                                <MudIconButton Icon="@Icons.Material.Filled.Delete" Color="Color.Error" Size="Size.Small"
                                               OnClick="() => ConfirmDelete(context)" />
                            </MudTd>
                        </RowTemplate>
                    </MudTable>


                    <MudDivider Class="my-4" /> //-------------------------------------------------------------------------------------------------------

                    <MudStack Direction="Row" AlignItems="AlignItems.Center" JustifyContent="SpaceBetween">
                        <MudText Typo="Typo.h6">📊 Proje Diyagramları</MudText>
                        <MudIconButton Icon="@Icons.Material.Filled.Add" OnClick="() => OpenDynamicDialog(nameof(ProjeDiyagram))" />
                    </MudStack>
                    <MudPaper Class="p-4">

                        <MudExpansionPanels Elevation="0">

                            @foreach (var grup in gruplanmisDiyagramlar)
                            {
                                <MudExpansionPanel Text="@(!string.IsNullOrEmpty(grup.Key) ? grup.Key : "Kategori Yok")">
                                    <div style="display: flex; overflow-x: auto; gap: 16px; padding: 1rem;">
                                        @foreach (var diyagram in grup)
                                        {
                                            <MudCard Style="min-width: 300px;">
                                                <MudCardContent>
                                                    <MudText Typo="Typo.subtitle1">@diyagram.DiyagramAdi</MudText>

                                                    <img src="@diyagram.DiyagramUrl" alt="Diyagram"
                                                         style="width: 100%; max-height: 200px; object-fit: contain; cursor: pointer;"
                                                         @onclick="@(args => ShowImage($"/{diyagram.DiyagramUrl}"))" />

                                                    <MudStack Direction="Row" JustifyContent="SpaceBetween" Class="mt-2">
                                                        <MudIconButton Icon="@Icons.Material.Filled.Edit" Color="Color.Primary" Size="Size.Small"
                                                                       OnClick="() => OpenDynamicDialog(nameof(ProjeDiyagram), diyagram.Id, diyagram)" />
                                                        <MudIconButton Icon="@Icons.Material.Filled.Delete" Color="Color.Error" Size="Size.Small"
                                                                       OnClick="() => ConfirmDelete(diyagram)" />
                                                    </MudStack>
                                                </MudCardContent>
                                            </MudCard>
                                        }
                                    </div>
                                </MudExpansionPanel>
                            }

                        </MudExpansionPanels>

                    </MudPaper>




                    <MudDivider Class="my-4" /> //-------------------------------------------------------------------------------------------------------

                    <MudStack Direction="Row" AlignItems="AlignItems.Center" Spacing="1" Class="mb-2">
                        <MudText Typo="Typo.h6">👥 Proje Takım Üyeleri</MudText>
                        <MudIconButton Icon="@Icons.Material.Filled.Add" OnClick="OpenKullaniciAtamaDialog" />
                    </MudStack>

                    <MudTable Items="@proje.ProjeUyeleri" Hover="true">
                        <HeaderContent>
                            <MudTh>Ad Soyad</MudTh>
                            <MudTh>Rol</MudTh>
                            <MudTh>Ünvan</MudTh>
                            <MudTh>Atanma Tarihi</MudTh>
                            <MudTh>Aksiyon</MudTh>
                        </HeaderContent>
                        <RowTemplate>
                            <MudTd>@context.Kullanici?.Ad @context.Kullanici?.Soyad</MudTd>
                            <MudTd>@context.Kullanici?.Rol</MudTd>
                            <MudTd>@context.Kullanici?.Title</MudTd>
                            <MudTd>@context.AtanmaTarihi.ToShortDateString()</MudTd>
                            <MudTd>
                                <MudIconButton Icon="@Icons.Material.Filled.Delete" Color="Color.Error" Size="Size.Small"
                                               OnClick="() => ConfirmDelete(context)" />
                            </MudTd>
                        </RowTemplate>
                    </MudTable>

                }
            </MudCardContent>
        </MudCard>
    </MudPaper>
</MudContainer>


<style>
    .flex-column {
        flex-direction: row !important;
    }
</style>


@code {
    [Parameter]
    public int ProjeID { get; set; }

    private Proje? proje;
    private List<ProjeKategori> kategoriler = new();
    private bool editMode = false;
    private List<IGrouping<string?, ProjeDiyagram>> gruplanmisDiyagramlar = new();
    private KullaniciRol? KullaniciRolu;

    //-------------------------------------------------------------------------------------------------------------------------------

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthStateProvider.GetAuthenticationStateAsync();
        var email = authState.User.Identity?.Name;

        if (!string.IsNullOrWhiteSpace(email))
        {
            var currentUser = await Db.Kullanicilar.FirstOrDefaultAsync(k => k.Email == email);
            if (currentUser != null)
            {
                KullaniciRolu = currentUser.Rol;
            }
        }

        proje = await Db.Projeler
            .Include(p => p.Kategori)
            .Include(p => p.Olusturan).ThenInclude(k => k.Departman)
            .Include(p => p.FinansalBilgiler)
            .Include(p => p.TeknikGereksinimler).ThenInclude(t => t.Notlar)
            .Include(p => p.FonksiyonelGereksinimler).ThenInclude(f => f.Notlar)
            .Include(p => p.ProjeDetay)
            .Include(p => p.ProjeDiyagramlari).ThenInclude(d => d.Kategori)
            .Include(p => p.ProjeUyeleri).ThenInclude(pt => pt.Kullanici)
            .FirstOrDefaultAsync(p => p.ProjeID == ProjeID);

        kategoriler = await Db.ProjeKategorileri.ToListAsync();

        if (proje?.ProjeDiyagramlari != null)
        {
            gruplanmisDiyagramlar = proje.ProjeDiyagramlari
                .GroupBy(d => d.Kategori != null ? d.Kategori.KategoriAdi : "Kategori Yok")
                .ToList();
        }
    }

    //-------------------------------------------------------------------------------------------------------------------------------

    private void ShowNotesDialog(List<GereksinimNotu> notlar, string dialogBaslik, int? fgId, int? tgId)
    {
        var parameters = new DialogParameters
            {
                ["Notlar"] = notlar,
                ["DialogBaslik"] = dialogBaslik,
                ["FonksiyonelGereksinimID"] = fgId,
                ["TeknikGereksinimID"] = tgId
            };

        DialogService.Show<Dialog_ProjectDetail_NotesViewer>("Notlar", parameters);
    }

    //-------------------------------------------------------------------------------------------------------------------------------

    private void ShowImage(string? url)
    {
        if (!string.IsNullOrWhiteSpace(url))
        {
            DialogService.Show<Dialog_ShowImage>("Görsel", new DialogParameters { ["ImageUrl"] = url });
        }
    }

    //-------------------------------------------------------------------------------------------------------------------------------

    private async Task OpenDynamicDialog(string entityType, int? entityId = null, object? entity = null)
    {
        if (!HasPermission())
        {
            Snackbar.Add("Bu işlemi gerçekleştirmek için yetkiniz bulunmamaktadır.", Severity.Error);
            return;
        }

        var parameters = new DialogParameters
    {
        { "EntityType", entityType },
        { "ProjeID", ProjeID }
    };

        if (entityId.HasValue)
            parameters.Add("EntityId", entityId.Value);

        if (entity is not null)
            parameters.Add("Entity", entity);

        var options = new DialogOptions
            {
                MaxWidth = MaxWidth.Medium,
                FullWidth = true,
                CloseButton = true
            };

        var dialog = DialogService.Show<Dialog_AddEntity>("Düzenle", parameters, options);
        var result = await dialog.Result;

        if (!result.Canceled)
        {
            await OnInitializedAsync();
            StateHasChanged();
        }
    }

    //-------------------------------------------------------------------------------------------------------------------------------

    private async void ConfirmDelete(object entity)
    {
        if (!HasPermission())
        {
            Snackbar.Add("Bu işlemi gerçekleştirmek için yetkiniz bulunmamaktadır.", Severity.Error);
            return;
        }

        var parameters = new DialogParameters
    {
        { "Entity", entity }
    };

        var options = new DialogOptions
            {
                MaxWidth = MaxWidth.Small,
                FullWidth = true,
                CloseButton = true
            };

        var dialog = DialogService.Show<Dialog_ConfirmDelete>("Silme Onayı", parameters, options);
        var result = await dialog.Result;

        if (!result.Canceled)
        {
            await OnInitializedAsync();
            StateHasChanged();
        }
    }


    //-------------------------------------------------------------------------------------------------------------------------------

    private async Task KaydetProje()
    {
        if (!HasPermission())
        {
            Snackbar.Add("Bu işlemi gerçekleştirmek için yetkiniz bulunmamaktadır.", Severity.Error);
            return;
        }

        if (proje is not null)
        {
            Db.Projeler.Update(proje);
            await Db.SaveChangesAsync();
            editMode = false;
            StateHasChanged();
            Snackbar.Add("Proje bilgileri başarıyla güncellendi.", Severity.Success);
        }
    }


    //-------------------------------------------------------------------------------------------------------------------------------

    private async void OpenKullaniciAtamaDialog()
    {

        if (!HasPermission())
        {
            Snackbar.Add("Bu işlemi gerçekleştirmek için yetkiniz bulunmamaktadır.", Severity.Error);
            return;
        }

        var parameters = new DialogParameters
            {
                ["Proje"] = proje,
                ["CompanyId"] = proje?.CompanyID
            };

        var options = new DialogOptions
            {
                MaxWidth = MaxWidth.Medium,
                FullWidth = true,
                CloseButton = true
            };

        var dialog = DialogService.Show<Dialog_ProjectAssignment>("Kullanıcı Ata", parameters, options);
        var result = await dialog.Result;

        if (!result.Canceled)
        {
            await OnInitializedAsync();
            StateHasChanged();
            Snackbar.Add("Kullanıcı başarıyla atandı.", Severity.Success);
        }
    }

    private bool HasPermission()
    {
        return KullaniciRolu == KullaniciRol.Admin || KullaniciRolu == KullaniciRol.ProjeYoneticisi;
    }


    private void ToggleEditMode()
    {
        if (!HasPermission())
        {
            Snackbar.Add("Bu işlemi gerçekleştirmek için yetkiniz bulunmamaktadır.", Severity.Error);
            return;
        }

        editMode = !editMode;
    }

}


