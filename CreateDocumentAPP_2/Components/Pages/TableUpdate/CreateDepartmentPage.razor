@page "/create-department"
@inject ProjeDbContext DbContext
@inject AuthenticationStateProvider AuthStateProvider
@inject NavigationManager Navigation
@inject ISnackbar Snackbar
@inject IDialogService DialogService

<MudContainer Class="DepartmanConteiner">
    <!-- Yeni Departman Oluşturma Formu -->
    <MudPaper Class="pa-6">
        <MudText Typo="Typo.h5" Class="mb-4">Yeni Departman Oluştur</MudText>

        <MudTextField Label="Departman Adı" @bind-Value="DepartmanAdi" Required="true" FullWidth="true" />

        <MudButton Variant="Variant.Filled" Color="Color.Primary" Class="mt-4" OnClick="OpenPreviewDialog">
            Departmanı Önizle
        </MudButton>
    </MudPaper>

    <!-- Mevcut Departmanların Listesi -->
    <MudDivider Class="my-4" />
    <MudText Typo="Typo.h6" Class="mb-2">Mevcut Departmanlar</MudText>
    <MudTable T="Departman" Items="MevcutDepartmanlar" Dense="true" Hover="true" Bordered="true">
        <HeaderContent>
            <MudTh>ID</MudTh>
            <MudTh>Departman Adı</MudTh>
            <MudTh>Şirket</MudTh>
        </HeaderContent>
        <RowTemplate>
            <MudTd DataLabel="ID">@context.DepartmanID</MudTd>
            <MudTd DataLabel="Departman Adı">@context.Ad</MudTd>
            <MudTd DataLabel="Şirket">@context.Company?.Ad</MudTd>
        </RowTemplate>
    </MudTable>
</MudContainer>

<style>
    .DepartmanConteiner {
        margin-left: 20px;
        padding: 10px;
    }
</style>

@code {
    private string DepartmanAdi = string.Empty;
    private Kullanici? CurrentUser;
    private List<Departman> MevcutDepartmanlar = new();

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthStateProvider.GetAuthenticationStateAsync();
        var email = authState.User.Identity?.Name;

        if (!string.IsNullOrWhiteSpace(email))
        {
            CurrentUser = await DbContext.Kullanicilar.Include(k => k.Company)
                                                       .FirstOrDefaultAsync(k => k.Email == email);
            if (CurrentUser != null)
            {
                // Şu an kullanıcının şirketine ait departmanları çekiyoruz
                MevcutDepartmanlar = await DbContext.Departmanlar
                    .Include(d => d.Company)
                    .Where(d => d.CompanyID == CurrentUser.CompanyID)
                    .OrderBy(d => d.Ad)
                    .ToListAsync();
            }
        }
    }

    private async Task OpenPreviewDialog()
    {
        if (string.IsNullOrWhiteSpace(DepartmanAdi))
        {
            Snackbar.Add("Departman adı boş olamaz!", Severity.Error);
            return;
        }

        // Duplicate kontrolü: Aynı isimde departman var mı?
        var companyId = CurrentUser?.CompanyID;
        if (companyId == null)
        {
            Snackbar.Add("Giriş yapan kullanıcının şirketi bulunamadı!", Severity.Error);
            return;
        }

        var mevcut = await DbContext.Departmanlar.FirstOrDefaultAsync(d =>
            d.Ad.ToLower() == DepartmanAdi.Trim().ToLower() && d.CompanyID == companyId);

        if (mevcut != null)
        {
            Snackbar.Add("Bu isimde bir departman zaten var.", Severity.Warning);
            return;
        }

        var yeniDepartman = new Departman
            {
                Ad = DepartmanAdi.Trim(),
                CompanyID = companyId.Value
            };

        var parameters = new DialogParameters
        {
            { "PreviewDepartment", yeniDepartman },
            { "CompanyName", CurrentUser?.Company?.Ad ?? "Bilinmiyor" }
        };

        var options = new DialogOptions { CloseButton = true, MaxWidth = MaxWidth.Small, FullWidth = true };

        // Dialog açılıyor
        var dialog = await DialogService.ShowAsync<Dialog_PreviewDepartment>("Departman Önizleme", parameters, options);
        var result = await dialog.Result;

        if (!result.Canceled)
        {
            await SaveDepartment();
        }
    }

    private async Task SaveDepartment()
    {
        var companyId = CurrentUser?.CompanyID;
        if (companyId == null)
        {
            Snackbar.Add("⚠️ Giriş yapan kullanıcının şirketi bulunamadı!", Severity.Error);
            return;
        }

        var mevcut = await DbContext.Departmanlar.FirstOrDefaultAsync(d =>
            d.Ad.ToLower() == DepartmanAdi.Trim().ToLower() && d.CompanyID == companyId);

        if (mevcut != null)
        {
            Snackbar.Add("⚠️ Bu isimde bir departman zaten var.", Severity.Warning);
            return;
        }

        var yeniDepartman = new Departman
            {
                Ad = DepartmanAdi.Trim(),
                CompanyID = companyId.Value
            };

        await DbContext.Departmanlar.AddAsync(yeniDepartman);
        await DbContext.SaveChangesAsync();

        Snackbar.Add("✅ Departman başarıyla oluşturuldu!", Severity.Success);

        // Listeyi yeniden güncelle: Yeni departmanı içerecek şekilde
        MevcutDepartmanlar = await DbContext.Departmanlar
            .Include(d => d.Company)
            .Where(d => d.CompanyID == companyId)
            .OrderBy(d => d.Ad)
            .ToListAsync();

        DepartmanAdi = string.Empty;
    }
}
